{"name":"Pulsar","tagline":"Pulsar asynchronous synthesis framework","body":"# Pulsar - A Flow to Support the Design of QDI asynchronous Circuits\r\n\r\nThis repository contains the public release of Pulsar, a timing-constrainable asynchronous circuit synthesis framework.\r\nPulsar is under development. \r\nIt was part of my MSc thesis work and is now part of my ongoing PhD thesis. \r\nIt is partially documented in references [1-3].\r\nAt the time of this writing, Pulsar is able to synthesise SDDS-NCL circuits.\r\nThe SDDS-NCL logic template that cupports the design of quasi-delay insensitive (QDI) circuits is documented in references [4-5].\r\n\r\nPulsar relies on Cadence Genus 18.1 or later versions of this tool to perform logic synthesis and optimisation.\r\nThis enables taking advantage of state of the art industrial synthesis tools to perform technology mapping.\r\nThe user is expected to have available a valid instalation of Genus to use Pulsar.\r\n\r\nThe Pulsar flow already supports multiple technology nodes.\r\nRunning Pulsar requires a specific cell library and some specific cell models, to generate what are called virtual netlists, a required step to adapt asynchronous design flows to employ commercial design tools.\r\nInternaly, at the GAPH research group, libraries and models for the TSMC 180nm and STMicroelectronics 65nm bulk CMOS commercial processes already exist.\r\nThese libraries and models are respectively named ASCEnD-TSMC180 and ASCEnD-ST65.\r\nPulsar and the ASCEnD-TSMC180 library and models have been used on a design taped-out to Europractice's Mini@sic MPW run in May 2020.\r\nBecause these libraries are covered by NDAs with the respectives foundries, they cannot be freely distribuited.\r\nInstead, this distribution includes a copy of ASCEnD-FreePDK45, a library and set of models developed based on the free, open source predictive FreePDK45.\r\nMore information on this library may be found at its [own repository](https://github.com/marlls1989/ascend-freepdk45).\r\n\r\nTo use this software, clone this repo and append the bin folder to your PATH:\r\n```bash\r\ngit clone https://github.com/marlls1989/pulsar.git\r\ncd pulsar\r\nexport PATH=$(pwd)/bin:$PATH\r\n```\r\n## The Pulsar Synthesis Flow\r\n\r\nAn overview of the Pulsar flow is depicted in Figure 1.\r\nIt comprises a front-end and a back-end.\r\nThe front-end is designed to be technology and template agnostic.\r\nIt produces a Virtual Netlist and a structural Circuit Graph from a high-level RTL description of the circuit in Verilog.\r\nThe front-end performs logical optimisation and maps the circuit to a abstract logic components with known dual-rail expansion.\r\nIt can also perform retiming, distributing components among pipeline stages to reduce logic complexity prior to a logic, dual-rail expansion.\r\nThe Circuit Graph captures the data flow between register components and ports, which is later used for timing analysis.\r\nThis process is better covered in references [1] and [2].\r\n\r\nThe resulting Virtual Netlist and the structural Circuit Graph are then processed by the template-dependent back-end to implement the circuit in the target technology.\r\nCurrently, the only back-end available with the Pulsar Flow targets the Pseudo-Synchronous SDDS-NCL template.\r\nThis back-end comprises the Half Buffer Channel Network (HBCN) Constrainer and the Sequential SDDS-NCL Synthesis Flow.\r\nThe HBCN Constrainer computes the HBCN model from the structural Circuit Graph and derives the design constrains to use during synthesis to constrain the cycle time.\r\nThe computation of these constraints are covered in references [2] and [3].\r\n\r\n<figure class=\"image\">\r\n  <figcaption>Figure 1. Pulsar flow overview, green components are part of the flow front-end and red components are part of the flow back-end.</figcaption>\r\n  <img src=\"./docs/drflow.svg\" alt=\"Pulsar flow overview.\"/>\r\n</figure>\r\n\r\nThe Sequential SDDS-NCL Synthesis Flow, depicted in Figure 2, is at the core of the Pulsar back-end.\r\nIt reads the Virtual Netlist and the Virtual Function Dual-Rail Expansions of components, a library of models.\r\nThis design is then flattened, optimised and mapped to NCL and NCLP gates in the target technology.\r\nThe Design Constraints built by the HBCN Constrainer steers this synthesis effort, constraining the cycle time.\r\nThe initial design mapping does not take into consideration the proper use of NCL and NCLP gates as mandated by the SDDS-NCL template. \r\nIt can thus generate circuits with incorrect functionality.\r\nThe initial mapping is accordingly called X-Netlist and it is corrected using the Fix X-Netlist algorithm.\r\nAfter correction, timing faults may have arisen, which are then fixed by iterating optimisation steps in turn on NCL and NCLP gates.\r\nThis is usually an automatic procedure.\r\nFor more information on SDDS-NCL and the Fix X-Netlist algorithm see references [4] and [5]. For the Sequential SDDS-NCL see references [2] and [3].\r\n\r\n<figure class=\"image\">\r\n  <figcaption>Figure 2. The Sequential SDDS-NCL Synthesis Flow.</figcaption>\r\n  <img src=\"./docs/SSDDS-Flow.svg\" alt=\"Sequential SDDS-NCL Synthesis.\"/>\r\n</figure>\r\n\r\n## Repository Structure\r\n\r\nThis repository is organised in the following structure, each subfolder contains a README further detailing their respective contents:\r\n- /bin : contains the precompiled drexpansion and hbcnConstrainer binaries and the scripts used to invoke genus.\r\n- /examples : contains a tutorial demonstraining the use of pulsar to synthesise a fully functional multiply accumulate (MAC) pipeline module.\r\n- /haskell : repository containing the haskell source code for the hbcnConstrainer and drexpension tools.\r\n- /scripts : contains the genus TCL scripts.\r\n- /tech : contains the target technology dependent files and the virtual-netlist library of components.\r\n\r\n## REFERENCES\r\n[1] - SARTORI, M. L. L.; MOREIRA, M. T.; CALAZANS, N. L. V. A Frontend using Traditional EDA Tools for the Pulsar QDI Design Flow. In: 26th IEEE International Symposium on Asynchronous Circuits and Systems (ASYNC'20), 2020. To be presented.\r\n\r\n[2] - SARTORI, M. L. L.. PULSAR: Towards a Synthesis flow for QDI Circuits. MSc Dissertation, PPGCC-FACIN-PUCRS, Porto Alegre, Brazil. August 2019. (Research Advisor: Ney Laert Vilar Calazans)\r\n\r\n[3] - SARTORI, M. L. L.; WUERDIG, R. N.; MOREIRA, M. T.; CALAZANS, N. L. V. Pulsar: Constraining QDI Circuits Cycle Time Using Traditional EDA Tools. In: 25th IEEE International Symposium on Asynchronous Circuits and Systems (ASYNC'19), Hirosaki, 2019. pp. 114-123. (Best Paper Award Nominee)\r\n\r\n[4] - MOREIRA, M. T.; BEEREL, P. A.; SARTORI, M. L. L.; CALAZANS, N. L. V. NCL Synthesis with Conventional EDA Tools: Technology Mapping and Optimization. IEEE Transactions on Circuits and Systems I - Regular Papers, 65(6), June 2018, pp. 1981-1993.\r\n\r\n[5] - MOREIRA, Matheus Trevisan. Asynchronous Circuits: Innovations in Components, Cell Libraries and Design Templates. PhD Thesis, PPGCC - FACIN - PUCRS, Porto Alegre, Brazil. January 2016. 276p. Scholarship Sponsor: CNPq (PNM). (Presented and  Approved. Research Advisor: Ney Laert Vilar Calazans, Co-Advisor: Peter Beerel, University of Southern California).\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}